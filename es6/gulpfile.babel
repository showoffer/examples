'use strict';

import plugins  from 'gulp-load-plugins';
import brwsrfy  from 'browserify';
import babelify from 'babelify';
import source   from 'vinyl-source-stream';
import buffer   from 'vinyl-buffer';
import yargs    from 'yargs';
import gulp     from 'gulp';
import rimraf   from 'rimraf';
import yaml     from 'js-yaml';
import fs       from 'fs';

// Load all Gulp plugins into one variable
const $ = plugins();

// Check for --production flag
const PRODUCTION = !!(yargs.argv.production);
const WP = !!(yargs.argv.wp);

// Load settings from settings.yml
const { COMPATIBILITY, PORT, PATHS } = loadConfig();

function loadConfig() {
  let ymlFile = fs.readFileSync('config.yml', 'utf8');
  return yaml.load(ymlFile);
}

// Build the "dist" folder by running all of the below tasks
gulp.task('build',
  gulp.series(clean, gulp.parallel(
    sass.bind(null, 'widget'),
    js.bind(null, 'widget'),
    sass.bind(null, 'iframe'),
    js.bind(null, 'iframe'),
    js.bind(null, 'snippet'),
    copy.bind(null, 'widget'),
    copy.bind(null, 'iframe')
    // imagesSlick,
    // fontsSlick
  )));


gulp.task('makeCdn',
  gulp.series('build', cleanCdn, copyToCdn));

// Build the site, run the server, and watch for file changes
gulp.task('default',
  gulp.series('build', watch));

// Delete the "dist" folder
// This happens every time a build starts
function clean(done) {
  rimraf(PATHS.dist, done);
}

// Copy files out of the assets folder
// This task skips over the "img", "js", and "scss" folders, which are parsed separately
function copy(name) {
  return gulp.src(PATHS.assets)
    .pipe(gulp.dest(PATHS.dist + '/' + name + '/assets'));
}

function cleanCdn(done) {
  rimraf(PATHS.cdn, done);
}

function copyToCdn() {
  return gulp.src(PATHS.dist + '/**/*')
    .pipe(gulp.dest(PATHS.cdn));
}

// Compile Sass into CSS
// In production, the CSS is compressed
function sass(name) {
  return gulp.src('scss/' + name + '/app.scss')
    .pipe($.removeCode({wp: WP}))
    .pipe($.sourcemaps.init())
    .pipe($.sass({
      includePaths: PATHS.sass[name]
    })
      .on('error', $.sass.logError))
    .pipe($.autoprefixer({
      browsers: COMPATIBILITY
    }))
    .pipe($.if(PRODUCTION, $.cssnano()))
    .pipe($.if(!PRODUCTION, $.sourcemaps.write()))
    .pipe(gulp.dest(PATHS.dist + '/' + name + '/css'));
    // .pipe(browser.reload({ stream: true }));
}

// Combine JavaScript into one file
// In production, the file is minified
function js(name) {
  return brwsrfy({
    entries: 'js/' + name + '/app.js',
    debug: true
  })
    .transform(babelify)
    .bundle()
    .pipe(source('app.js'))
    .pipe($.removeCode({wp: WP}))
    .pipe(buffer())
    .pipe($.sourcemaps.init())
    // Add transformation tasks to the pipeline here.
    .pipe($.if(PRODUCTION, $.uglify()
      .on('error', e => { console.log(e); })
    ))
    .pipe($.if(!PRODUCTION, $.sourcemaps.write()))
    .pipe(gulp.dest(PATHS.dist + '/' + name + '/js'));
}

// Copy images to the "dist" folder
// In production, the images are compressed
function imagesSlick() {
  return gulp.src(PATHS.imagesSlick)
    // .pipe($.if(PRODUCTION, $.imagemin({
    //   progressive: true
    // })))
    .pipe(gulp.dest(PATHS.dist + '/iframe/css'))
    .pipe(gulp.dest(PATHS.dist + '/widget/css'));
}

function fontsSlick() {
  return gulp.src(PATHS.fontsSlick)
    .pipe(gulp.dest(PATHS.dist + '/iframe/css/fonts'));
}

// Watch for changes to static assets, pages, Sass, and JavaScript
function watch() {
  gulp.watch(PATHS.assets, gulp.series(copy.bind(null, 'widget')/*, copy.bind(null, 'iframe')*/));
  gulp.watch('scss/**/*.scss').on('change', gulp.series(sass.bind(null, 'widget'), sass.bind(null, 'iframe')));
  gulp.watch('js/**/*.js').on('change', gulp.series(js.bind(null, 'widget'), js.bind(null, 'iframe'), js.bind(null, 'snippet')));
}
